package phoneList;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Arrays;

/**
 *
 * @author arlese.rodriguezp
 * Trie Data Structure implemented in Java
 * 
 */
public class PhoneList {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter sc = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        
        int t = Integer.parseInt(br.readLine().trim());
        for (int j = 0; j < t; j++) {
			
	        int n = Integer.parseInt(br.readLine().trim());
	        boolean flag = true;
	        Node trie = new Node(0);
	        
	        //System.out.println(trie);
	        
	        for (int i = 0; i < n; i++) {
	            String s = br.readLine();
	            if(!buildTrie(trie, s)) {
	            	flag = false;
	            	break;
	            }
	        }
	        
	        if (flag) {
				sc.println("YES");
			}else {
				sc.println("NO");
			}
        }
        sc.close();
    }

    private static boolean buildTrie(Node trie, String s) {
        
    	int i = 0;
        Node currentTrie = trie;
        
        while (i < s.length()) {
        	//System.out.println(currentTrie);
            if (currentTrie.links[s.charAt(i) - '0'] == null) { //if letter is empty stores this letter in current trie.
                Node n = new Node(s.charAt(0) - '0'); 
                currentTrie = currentTrie.links[s.charAt(i) - '0'] = n; //update current to last letter.
                //System.out.println("1");
            } else {
                if(!currentTrie.links[s.charAt(i) - '0'].end) {
                	currentTrie = currentTrie.links[s.charAt(i) - '0']; //use current letter.
                }else {
                	return false;
                }
                //System.out.println("2");
            }
            i++;
        }
        
        currentTrie.end = true;
        //System.out.println(currentTrie);
        return true;
    }

    //Base Node of a Trie 
    static class Node {
        int id; //indicates symbol in this case letter
        boolean end; //indicates end of a String given
        Node[] links;
        
        public Node(int id) {
            this.id = id;
            end = false;
            this.links = new Node[10]; //27 in this case because is implemented for letters
        }
        
        
        public String toString() {
        	return "Id:"+id+", links: "+toLinks()+", end: "+end;
        }
        
        public String toLinks() {
        	String linksToString = "\n{ ";
        	
        	for (int i = 0; i < links.length; i++) {
        		if(links[i] != null) {
        		if(i != links.length-1) linksToString += (char)('A'+i)+" "+links[i]+", ";
        		else linksToString += links[i];
        		}
			}
        	
        	linksToString += " }\n";
        	
        	return linksToString;
        }

    }
}